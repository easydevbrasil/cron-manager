version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cron-manager-app
    restart: unless-stopped
    ports:
      - "8080:5000"
    environment:
      DATABASE_URL: postgresql://cronuser:${POSTGRES_PASSWORD:-cronpass123}@postgres:5432/cronmanager
      API_KEY: "KAIPETJZVHYGBGVVBKHSSBSLAFWNZZRQTITQODYTLTHYJMFOJNHRMVSQPBKKKETB"
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@cronmanager.com}
      EMAIL_FROM_NAME: "Cron Manager"
      APP_URL: "http://localhost:8080"
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-webhook-secret-key}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Task Settings
      DEFAULT_TASK_TIMEOUT: ${DEFAULT_TASK_TIMEOUT:-300000}
      MAX_CONCURRENT_TASKS: ${MAX_CONCURRENT_TASKS:-10}
      
      # CORS Settings
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:8080}
      TRUSTED_ORIGINS: ${TRUSTED_ORIGINS:-localhost:8080,localhost:5000}
      
    volumes:
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cron-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cron-network:
    driver: bridge